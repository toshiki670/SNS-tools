//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.14

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "items")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub username: Option<String>,
    pub password: Option<String>,
    pub note: Option<String>,
    pub created_at: DateTimeUtc,
    pub updated_at: DateTimeUtc,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::columns::Entity")]
    Columns,
    #[sea_orm(has_many = "super::item_taggings::Entity")]
    ItemTaggings,
    #[sea_orm(has_many = "super::sections::Entity")]
    Sections,
    #[sea_orm(has_many = "super::websites::Entity")]
    Websites,
}

impl Related<super::columns::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Columns.def()
    }
}

impl Related<super::item_taggings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ItemTaggings.def()
    }
}

impl Related<super::sections::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Sections.def()
    }
}

impl Related<super::websites::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Websites.def()
    }
}

impl Related<super::tags::Entity> for Entity {
    // The final relation is Cake -> CakeFilling -> Filling
    fn to() -> RelationDef {
        super::item_taggings::Relation::Tags.def()
    }

    fn via() -> Option<RelationDef> {
        Some(super::item_taggings::Relation::Items.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
