//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.14

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Eq, EnumIter, DeriveActiveEnum, Serialize, Deserialize)]
#[sea_orm(rs_type = "i32", db_type = "Integer")]
pub enum ValueType {
    Undefined = 0,
    Text = 1,
    Url = 2,
    Email = 3,
    Address = 4,
    Date = 5,
    Password = 6,
}

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "column")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub item_id: Option<i32>,
    pub section_id: Option<i32>,
    pub name: Option<String>,
    pub value: Option<String>,
    pub value_type: ValueType,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::item::Entity",
        from = "Column::ItemId",
        to = "super::item::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Item,
    #[sea_orm(
        belongs_to = "super::section::Entity",
        from = "Column::ItemId",
        to = "super::section::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Section,
}

impl Related<super::item::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Item.def()
    }
}

impl Related<super::section::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Section.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
