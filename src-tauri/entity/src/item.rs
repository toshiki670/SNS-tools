//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.14

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "item")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub username: Option<String>,
    pub password: Option<String>,
    pub note: Option<String>,
    pub created_at: DateTimeUtc,
    pub updated_at: DateTimeUtc,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::column::Entity")]
    Column,
    #[sea_orm(has_many = "super::item_tagging::Entity")]
    ItemTagging,
    #[sea_orm(has_many = "super::section::Entity")]
    Section,
    #[sea_orm(has_many = "super::website::Entity")]
    Website,
}

impl Related<super::column::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Column.def()
    }
}

impl Related<super::item_tagging::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ItemTagging.def()
    }
}

impl Related<super::section::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Section.def()
    }
}

impl Related<super::website::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Website.def()
    }
}

impl Related<super::tag::Entity> for Entity {
    // The final relation is Cake -> CakeFilling -> Filling
    fn to() -> RelationDef {
        super::item_tagging::Relation::Tag.def()
    }

    fn via() -> Option<RelationDef> {
        Some(super::item_tagging::Relation::Item.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
